name: Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-1"
  EKS_CLUSTER_NAME: eks-cluster-tech-challenge-ordermanagement

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      # Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubeconfig for EKS
        uses: silverlyra/setup-aws-eks@v0.1
        with:
          cluster: ${{ env.EKS_CLUSTER_NAME }}

      # Captura o DNS do primeiro Load Balancer
      - name: Get EKS Load Balancer DNS
        id: get_lb
        run: |
          LB_DNS=$(aws elb describe-load-balancers \
            --query "LoadBalancerDescriptions[0].DNSName" \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "LB_DNS=$LB_DNS" >> $GITHUB_ENV
          echo "DNS do LB: $LB_DNS"

      - name: Get RDS endpoint
        id: rds
        run: |
          RDS_HOST=$(aws rds describe-db-instances \
            --db-instance-identifier tech-challenge-ordermanagement-postgres \
            --query "DBInstances[0].Endpoint.Address" \
            --output text)
          echo "RDS_HOST=$RDS_HOST" >> $GITHUB_ENV

      # ZIP Lambdas
      - name: ZIP Lambdas
        run: |
          cd terraform/lambda/auth
          zip -r -X ../../auth.zip index.js package.json node_modules/
          cd ../authorizer
          zip -r -X ../../authorizer.zip index.js package.json node_modules/
          cd ../registerUser
          zip -r -X ../../registerUser.zip index.js package.json node_modules/

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Inicializar Terraform Init
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      # Validar Terraform
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      # Terraform Plan com vari√°veis
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan -out=tfplan \
            -var "api_uri=http://$lb_dns/" \
            -var "jwt_secret=${{ secrets.JWT_TOKEN }}" \
            -var "db_username=${{ secrets.DB_USER }}" \
            -var "db_password=${{ secrets.DB_PASS }}" \
            -var "db_host=$RDS_HOST"

      # Terraform Apply
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
